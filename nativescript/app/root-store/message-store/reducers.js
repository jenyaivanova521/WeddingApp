"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var actions_1 = require("./actions");
var state_1 = require("./state");
var app_config_1 = require("../../shared/configs/app.config");
function reducer(state, action) {
    if (state === void 0) { state = state_1.initialState; }
    var index;
    var updatedConversations = [];
    var unreadMessagesCount;
    switch (action.type) {
        case actions_1.MessageActionTypes.APPEND_CONVERSATIONS:
            var conversationsToAppend_1 = {};
            action.payload.conversations.map(function (item, index) {
                if (item.id !== state.activeConversationId) {
                    item.unreadMessagesCount = 0;
                }
                conversationsToAppend_1[item.id] = item;
            });
            for (var i = 0; i < state.conversations.length; i++) {
                var conversation = state.conversations[i];
                if (conversationsToAppend_1[conversation.id]) {
                    delete conversationsToAppend_1[conversation.id];
                }
            }
            return tslib_1.__assign({}, state, { conversations: state.conversations.concat(Object.values(conversationsToAppend_1)), infiniteScroll: tslib_1.__assign({}, state.infiniteScroll, { page: action.payload.infiniteScroll.page, disabled: action.payload.infiniteScroll.disabled }) });
        case actions_1.MessageActionTypes.UPDATE_CONVERSATION_LAST_MESSAGE:
            var conversationToUpdate = void 0;
            unreadMessagesCount = state.unreadMessagesCount;
            for (var i = 0; i < state.conversations.length; i++) {
                var conversation = Object.assign({}, state.conversations[i]);
                if (conversation.id == action.payload.conversationId) {
                    conversationToUpdate = conversation;
                }
                else {
                    updatedConversations.push(conversation);
                }
            }
            if (conversationToUpdate) {
                conversationToUpdate.lastMessage = action.payload.lastMessage;
                updatedConversations.unshift(conversationToUpdate);
            }
            if (state.activeConversationId !== conversationToUpdate.id) {
                var sound = new Audio(app_config_1.CDN_URL + '/sounds/message.mp3');
                sound.play();
                conversationToUpdate.unreadMessagesCount++;
                unreadMessagesCount++;
            }
            return tslib_1.__assign({}, state, { conversations: updatedConversations, unreadMessagesCount: unreadMessagesCount });
        case actions_1.MessageActionTypes.SET_UNREAD_MESSAGES_COUNT:
            return tslib_1.__assign({}, state, { unreadMessagesCount: action.payload.unreadMessagesCount });
        case actions_1.MessageActionTypes.SET_ACTIVE_CONVERSATION_ID:
            if (!action.payload.activeConversationId) {
                return tslib_1.__assign({}, state, { activeConversationId: null });
            }
            updatedConversations = state.conversations.map(function (item, index) {
                if (item.id !== action.payload.activeConversationId) {
                    return item;
                }
                unreadMessagesCount = state.unreadMessagesCount - parseInt(item.unreadMessagesCount);
                return tslib_1.__assign({}, item, { unreadMessagesCount: 0 });
            });
            return tslib_1.__assign({}, state, { activeConversationId: action.payload.activeConversationId, conversations: updatedConversations, unreadMessagesCount: unreadMessagesCount });
        case actions_1.MessageActionTypes.APPEND_NEW_CONVERSATION:
            unreadMessagesCount = state.unreadMessagesCount;
            if (!action.payload.self) {
                var sound = new Audio(app_config_1.CDN_URL + '/sounds/message.mp3');
                sound.play();
                unreadMessagesCount++;
            }
            return tslib_1.__assign({}, state, { conversations: [
                    action.payload.conversation
                ].concat(state.conversations), unreadMessagesCount: unreadMessagesCount });
        default:
            return state;
    }
}
exports.reducer = reducer;
//# sourceMappingURL=data:application/json;base64,